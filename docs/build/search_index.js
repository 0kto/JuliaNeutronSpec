var documenterSearchIndex = {"docs":
[{"location":"#Documentation","page":"Documentation","title":"Documentation","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"CurrentModule = JuliaNeutronSpec","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Depth = 3","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"The package handles data parsing and analysis for inelastic neutron scattering experiments. It aims to be a flexible and reliable package for all needs for data ingestion and fast plotting, and holds routines for data analysis.","category":"page"},{"location":"#Environment","page":"Documentation","title":"Environment","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"The package relies on many other Julia packages, and makes using them a bit easier by providing wrappers for specific functions.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Some of the most important Packages are:","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"DataFrames.jl and CSV.jl","category":"page"},{"location":"#Features","page":"Documentation","title":"Features","text":"","category":"section"},{"location":"#I/O","page":"Documentation","title":"I/O","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"io_ill_header\nio_ill\ncalc_detector_efficiency(df::AbstractDataFrame)","category":"page"},{"location":"#JuliaNeutronSpec.io_ill_header","page":"Documentation","title":"JuliaNeutronSpec.io_ill_header","text":"io_ill_header(filename::AbstractString)\n\nReads the ILL header and returns the three dictionaries\n\nparam with all the instrument configs\nvaria with all the motors\nmotor0 with all the zero values for the motors\ndf_meta with the line numbers important for reading the actual counts\n\n\n\n\n\n","category":"function"},{"location":"#JuliaNeutronSpec.io_ill","page":"Documentation","title":"JuliaNeutronSpec.io_ill","text":"io_ill(filename::AbstractString,\n       precision_dict::AbstractDict{Symbol,Int};\n       kwargs...)\n\nRead a single experimental measurement scan from file. Handles the ILL format for inelastic neutron spectrometers (tested with IN20, IN8) in single detector and multidetector (flatcone) configuration. The output DataFrame has columns determined in columnsTAS.   Motor angles can be overwritten by supplying a dictionary to the kwarg override.\n\nArguments\n\nfilename::AbstractString: relative file path\nprecision_dict::AbstractDict{Symbol,Int}: rounding to precision for defined column (precision_dict=Dict(:EN=>2)).\nkwargs...:\nrename_cols::Dict(): Dict(:old_name => :new_name)\nki::Number: only supply in ki=fixed measurements (time-of-flight)\nkf::Number: manually supply kf\noverride::Dict(): Dict(:A1 = 15.0)\ndetector_efficiency::Array{Union{Float,Measurments}}\npar_lat::Array{Float,1}: [a b c α β γ]\n\nSee also: columnsTAS, calc_detector_efficiency\n\n\n\n\n\n","category":"function"},{"location":"#JuliaNeutronSpec.calc_detector_efficiency-Tuple{AbstractDataFrame}","page":"Documentation","title":"JuliaNeutronSpec.calc_detector_efficiency","text":"calc_detector_efficiency(df)\n\ncalculate the detector efficiency for each detector distinguised by :detID using a single measurement. The output can be handed over to io_ill( ...; detector_efficiency=output), or the correction can be manually applied by dividing the Monitor count by the output.\n\nArguments\n\ndf::AbstractDataFrame: cols :CNTS and :detID are mandatory.\n\nSee also io_ill\n\n\n\n\n\n","category":"method"},{"location":"#DataHandling","page":"Documentation","title":"DataHandling","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"combine\nnormalize\nnormalize!","category":"page"},{"location":"#JuliaNeutronSpec.combine","page":"Documentation","title":"JuliaNeutronSpec.combine","text":"combine(\n    df_in::AbstractDataFrame,\n    edges;\n    bin_cols::Array{Symbol,1}=[:EN],\n    monitor_count::Number=1e4\n)\n\nCombine multiple measurements to a single measurement. This function should only be applied to raw data!\n\nAll data in a DataFrame is binned according to edges along the columns defined in bin_cols and normalized to monitor_count.\n\n\n\n\n\n","category":"function"},{"location":"#JuliaNeutronSpec.normalize","page":"Documentation","title":"JuliaNeutronSpec.normalize","text":"normalize!(\n    df::AbstractDataFrame;\n    monitor_col::Symbol=:MON,\n    monitor_count::Float64=1e4,\n    data_cols::Array{Symbol,1}=[:CNTS]\n)\n\nreturn a normalized DataFrame by scaling the column monitor_col to monitor_count, and applying the same scaling factor to the all data_cols as well.\n\nSee also: normalize\n\n\n\n\n\n","category":"function"},{"location":"#JuliaNeutronSpec.normalize!","page":"Documentation","title":"JuliaNeutronSpec.normalize!","text":"normalize!(\n    df::AbstractDataFrame;\n    monitor_col::Symbol=:MON,\n    monitor_count::Float64=1e4,\n    data_cols::Array{Symbol,1}=[:CNTS]\n)\n\nnormalize a DataFrame in place by scaling the column monitor_col to monitor_count, and applying the same scaling factor to the all data_cols as well.\n\nSee also: normalize\n\n\n\n\n\n","category":"function"},{"location":"#Analysis","page":"Documentation","title":"Analysis","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"OrientationFactor\nPolarizationAnalysis","category":"page"},{"location":"#JuliaNeutronSpec.OrientationFactor","page":"Documentation","title":"JuliaNeutronSpec.OrientationFactor","text":"orientationfactor_sq(x,y,z)\n\ncalcualte orientation factor for a,b,c direction from qx qy q_z in units of Å^-1\n\n\n\n\n\n","category":"function"},{"location":"#JuliaNeutronSpec.PolarizationAnalysis","page":"Documentation","title":"JuliaNeutronSpec.PolarizationAnalysis","text":"PolarizationAnalysis(df, MMON = 1e4, precision_dict)\n\nconverts NeutronDataFrames to polarizedNeutronDataFrames. sorts into SF / NSF, and x,y,z channels, and calculates polarization of excitations (relative to Q)\n\n\n\n\n\n","category":"function"},{"location":"#Extended-Packages","page":"Documentation","title":"Extended Packages","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"fit\nSpline1D","category":"page"},{"location":"#Scattering-Functions","page":"Documentation","title":"Scattering Functions","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Kf","category":"page"},{"location":"#JuliaNeutronSpec.Kf","page":"Documentation","title":"JuliaNeutronSpec.Kf","text":"Kf(kf, ϕ; ψ = 0)\n\ncalculate Kf from kf (Å^-1), ϕ (°), and ψ. ϕ is the horizontal detector angle. ψ is the vertical detector angle. TODO: implement out-of-plane scattering depending on ψ.\n\n\n\n\n\n","category":"function"},{"location":"#Other","page":"Documentation","title":"Other","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"columnsTAS","category":"page"},{"location":"#JuliaNeutronSpec.columnsTAS","page":"Documentation","title":"JuliaNeutronSpec.columnsTAS","text":"columnsTAS\n\nOrderedDict that lists columns and corresponding etypes for DataFrames holding TAS Neutron Data.\n\n\n\n\n\n","category":"constant"}]
}
